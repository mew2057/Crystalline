// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "Weapons/CrystallineWeapon.h"
#include "CrystallinePistol.generated.h"

// XXX do we want this as a projectile or hitscan ?
/** A collection of the psuedo constants used by the pistol. */
USTRUCT()
struct FPistolProjectileData
{
	GENERATED_USTRUCT_BODY()
	/** The class of the Projectile that will be shot by the weapon. */
	UPROPERTY(EditDefaultsOnly)
	TSubclassOf<class ACrystallineProjectile> ProjectileClass;

	/** The life span of the projectile before despawning. */
	UPROPERTY(EditDefaultsOnly)
	float ProjectileLife;

	/** The damage caused by the projectile. */
	UPROPERTY(EditDefaultsOnly)
	float ProjectileDamage;

	/** The maximum "heat" that the pistol can achieve before */
	UPROPERTY(EditDefaultsOnly)
	float MaxHeat;

	/** The heat generated by each shot. */
	UPROPERTY(EditDefaultsOnly)
	float HeatPerShot;

	/** Heat reduction per second.*/
	UPROPERTY(EditDefaultsOnly)
	float CooldownPerSecond;

	/** The amount of time that the weapon is in the "overheat" state. */
	UPROPERTY(EditDefaultsOnly)
	float OverheatTime;

	/** Sets defaults */
	FPistolProjectileData()
	{
		ProjectileClass   = NULL;
		ProjectileLife    = 2.0f;
		ProjectileDamage  = 1.f;

		// Heat settings.
		MaxHeat           = 100.f;
		HeatPerShot       = 10.f;
		CooldownPerSecond = 30.f;
		OverheatTime      = 3.f;
	}
};

/**
 * A cooldown based projectile weapon.
 */
UCLASS(Abstract)
class CRYSTALLINE_API ACrystallinePistol : public ACrystallineWeapon
{
	GENERATED_UCLASS_BODY()

	/** The configuration for the pistol's projectile. */
	UPROPERTY(EditDefaultsOnly, Category = ProjectileConfig)
	FPistolProjectileData ProjectileConfig;

	

	/** Identifies if the pistol is in the overheated state, no shots are allowed. */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Health)
	uint32 bIsOverheated : 1;

	/** Identifies if the pistol is in the overheated state, no shots are allowed. */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Health)
	uint32 bIsCoolingDown : 1;

	////////////////////////////////////
	// Overheat Mechanic
	/** The current heat of the weapon, Zero at start.*/
	UPROPERTY(Transient)
	float WeaponHeat;

	/** Updates the weapon on tick. Used for the heat mechanic.*/
	virtual void Tick(float DeltaSeconds) override;
protected:

	/** Fires the pistol projectile. */
	virtual void FireWeapon() override;
	
	virtual void UseAmmo() override;
	
	virtual bool CanFire() override;

	/** Fires a projectile on the server. */
	UFUNCTION(reliable, server, WithValidation)
	void ServerFireProjectile(FVector Origin, FVector_NetQuantizeNormal ShootDir);

	

	/////////////////////////////////////
	// Overheat Mechanic
	void HandleOverheatCooldown();

	void FinishCooldown();

	
};
